ggtitle("input$burr")
c
c <- ggplot(final_shiny_2,aes(x=year,y=duplicates))+
geom_bar(stat="identity")+
theme(
panel.background = element_rect(fill = "transparent",colour = NA), # or theme_blank()
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
plot.background = element_rect(fill = "transparent",colour = NA))+
xlab("Year")+
ylab("Number of Duplicate Complaints")+
ggtitle(paste("Borough","input$burr"))
c
shiny::runApp()
shiny::runApp()
shiny::runApp()
topo.colors(12)
topo.colors(2)
shiny::runApp()
shiny::runApp()
topo.colors
topo.colors(12)
topo.colors(12)[1]
topo.colors(2)[1]
topo.colors(2)[1:2]
topo.colors(2)[2,3]
topo.colors(2)[2:3]
topo.colors(3)[2:3]
topo.colors(3)[1,3]
topo.colors(3)[3]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('GitHub/project2-cycle2-8/app')
shiny::runApp('GitHub/project2-cycle2-8/app')
devtools::install_github('rstudio/rsconnect')
rsconnect::setAccountInfo(name='cks1001652', token='C61DB6759659A41BE9F2D7CA297FF941', secret='V1ml6sx636JjZS2si1REQVYrJe5RVz3BihvQ1DFA')
library(rsconnect)
rsconnect::deployApp('~/Github/project2-cycle2-8/app')
library(rsconnect)
rsconnect::deployApp('~/Github/project2-cycle2-8/')
library(rsconnect)
deployapp()
deployApp()
shiny::runApp('GitHub/project2-cycle2-8/app')
setwd("~/GitHub/cycle3cvd-team7/wyc/")
dir_images <- "./data"
dir_names <- list.files(dir_images)
breed_name <- rep(NA, length(dir_names))
for(i in 1:length(dir_names)){
tt <- unlist(strsplit(dir_names[i], "_"))
tt <- tt[-length(tt)]
breed_name[i] = paste(tt, collapse="_", sep="")
}
cat_breed <- c("Abyssinian", "Bengal", "Birman", "Bombay", "British_Shorthair", "Egyptian_Mau",
"Maine_Coon", "Persian", "Ragdoll", "Russian_Blue", "Siamese", "Sphynx")
iscat <- breed_name %in% cat_breed
y_cat <- as.numeric(iscat)
iscat[iscat==TRUE] <- 1
iscat[iscat==FALSE] <-2
label <- iscat
system.time(tm_feature_train <- data_train <- feature(img_train_dir, dir_names))
img_train_dir <- "./data/"
library("EBImage")
source("feature.R")
system.time(tm_feature_train <- data_train <- feature(img_train_dir, dir_names))
source("feature.R")
img_train_dir <- "./data/"
system.time(tm_feature_train <- data_train <- feature(img_train_dir, dir_names))
source("feature.R")
system.time(tm_feature_train <- data_train <- feature(img_train_dir, dir_names))
img_dir
img_dir <- img_train_dir
img_name <- dir_names
paste0(img_dir, img_name)[i]
imageData(paste0(img_dir, img_name)[i])
imageData(paste0(img_dir, img_name)[i])
img
nR <- 5
nG <- 5
nB <- 5
rBin <- seq(0, 1, length.out=nR)
gBin <- seq(0, 1, length.out=nG)
bBin <- seq(0, 1, length.out=nB)
mat
img
img <- readImage(paste0(img_dir, img_name)[i])
img
mat <- img
as.data.frame(table(factor(findInterval(mat[,,1], rBin), levels=1:nR),
factor(findInterval(mat[,,2], gBin), levels=1:nG),
factor(findInterval(mat[,,3], bBin), levels=1:nB)))
as.numeric(freq_rgb$Freq)/(ncol(mat)*nrow(mat))
freq_rgb <- as.data.frame(table(factor(findInterval(mat[,,1], rBin), levels=1:nR),
factor(findInterval(mat[,,2], gBin), levels=1:nG),
factor(findInterval(mat[,,3], bBin), levels=1:nB)))
mat
as.numeric(freq_rgb$Freq)/(ncol(mat)*nrow(mat))
source("feature.R")
source("feature.R")
system.time(tm_feature_train <- data_train <- feature(img_train_dir, dir_names))
library(data.table)
?as.data.table
library(data.table)
tm_feature_train <- cbind(tm_feature_train,label)
save(data_train, file="./output/feature_train.RData")
attach(tm_feature_train)
head(tm_feature_train)
model <- svm(label~.,data=tm_feature_train,linear)
library(e1071)
model <- svm(label~.,data=tm_feature_train,linear)
model <- svm(label~.,data=tm_feature_train,kernel = "linear")
model <- svm(x=tm_feature_train[,1:125],y=tm_feature_train[,126],kernel = "linear")
warnings
warnings()
model
library(compiler)
n_files=1000
rgb_feature1 <- matrix(NA,nrow=n_files,ncol = nR*nG*nB)
for(i in 1:n_files){
if(trunc(i/5)*5==i){print(i)}
img <- readImage(paste0(img_dir, img_name)[i])
#     mat <- imageData(img)
freq_rgb <- as.data.table(table(factor(findInterval(mat[,,1], rBin), levels=1:nR),
factor(findInterval(mat[,,2], gBin), levels=1:nG),
factor(findInterval(mat[,,3], bBin), levels=1:nB)))
rgb_feature1[i,] <- cmpfun(as.numeric(freq_rgb$N)/(ncol(mat)*nrow(mat))) # normalization
}
for(i in 1:n_files){
if(trunc(i/5)*5==i){print(i)}
img <- cmpfun(readImage(paste0(img_dir, img_name)[i]))
#     mat <- imageData(img)
freq_rgb <- as.data.table(table(factor(findInterval(mat[,,1], rBin), levels=1:nR),
factor(findInterval(mat[,,2], gBin), levels=1:nG),
factor(findInterval(mat[,,3], bBin), levels=1:nB)))
rgb_feature1[i,] <- as.numeric(freq_rgb$N)/(ncol(mat)*nrow(mat)) # normalization
}
tm_feature_train <- data_train
model <- svm(x=tm_feature_train,y=label,kernel = "linear"scale=F)
model <- svm(x=tm_feature_train,y=label,kernel = "linear",scale=F)
length(dir_names)
testlabel <- sample(rep(1:length(dir_names)),2000)
testlabel
testlabel <- sample(rep(1:length(dir_names)),1000)
testlabel
set.seed(14249)
testlabel <- sample(rep(1:length(dir_names)),1000)
testlabel
testlabel
testlabel <- sample(rep(1:length(dir_names)),1000)
testlabel
set.seed(14249)
testlabel <- sample(rep(1:length(dir_names)),1000)
testlabel
test_dir_names <- dir_names[testlabel]
test_dir_names
testlabel[1]
library(caret)
install.packages("caret")
library(caret)
breed_name <- rep(NA, length(dir_names))
for(i in 1:length(dir_names)){
tt <- unlist(strsplit(dir_names[i], "_"))
tt <- tt[-length(tt)]
breed_name[i] = paste(tt, collapse="_", sep="")
}
cat_breed <- c("Abyssinian", "Bengal", "Birman", "Bombay", "British_Shorthair", "Egyptian_Mau",
"Maine_Coon", "Persian", "Ragdoll", "Russian_Blue", "Siamese", "Sphynx")
iscat <- breed_name %in% cat_breed
y_cat <- as.numeric(iscat)
iscat[iscat==TRUE] <- 1
iscat[iscat==FALSE] <-2
label <- iscat
set.seed(14249)
trainlabel <- createDataPartition(label, p = .8,
list = FALSE,
times = 1)
testlabel <- dir_names[-trainlabel]
trainlabel
testlabel <- label[-trainlabel]
testlabel
trainname <- dir_names[trainlabel]
trainname
trainlabel
testname <- dir_names[testlabel]
testname
trainlabel <- createDataPartition(label, p = .8,
list = FALSE,
times = 1)
testlabel <- label[-trainlabel]
trainname <- dir_names[trainlabel]
testname <- dir_names[testlabel]
testname
trainname
trainlabel
head(trainlabel)
trainlabel <- createDataPartition(label, p = .75,
list = FALSE,
times = 1)
trainlabel
head(trainlabel)
trainindex <- createDataPartition(label, p = .75,
list = FALSE,
times = 1)
trainname <- dir_names[trainindex]
testname <- dir_names[-trainindex]
trainlabel <- label[trainindex]
testlabel <- label[-trainindex]
trainname
head(trainname)
head(testname)
head(testlabel)
head(trainlabel)
setwd("~/GitHub/cycle3cvd-team7/wyc/")
library(data.table)
library(caret)
#Extract the class labels from the image name
dir_images <- "./data"
dir_names <- list.files(dir_images)
breed_name <- rep(NA, length(dir_names))
for(i in 1:length(dir_names)){
tt <- unlist(strsplit(dir_names[i], "_"))
tt <- tt[-length(tt)]
breed_name[i] = paste(tt, collapse="_", sep="")
}
cat_breed <- c("Abyssinian", "Bengal", "Birman", "Bombay", "British_Shorthair", "Egyptian_Mau",
"Maine_Coon", "Persian", "Ragdoll", "Russian_Blue", "Siamese", "Sphynx")
iscat <- breed_name %in% cat_breed
y_cat <- as.numeric(iscat)
iscat[iscat==TRUE] <- 1
iscat[iscat==FALSE] <-2
label <- iscat
set.seed(14249)
trainindex <- createDataPartition(label, p = .75,
list = FALSE,
times = 1)
trainname <- dir_names[trainindex]
testname <- dir_names[-trainindex]
trainlabel <- label[trainindex]
testlabel <- label[-trainindex]
library("EBImage")
source("feature.R")
img_test_dir <- img_train_dir <- "./data/"
system.time(tm_feature_test <- data_test <- feature(img_test_dir, testname))
source("feature.R")
system.time(tm_feature_test <- data_test <- feature(img_test_dir, testname))
system.time(tm_feature_train <- data_train <- feature(img_train_dir, trainname))
i
data_train
system.time(tm_feature_test <- data_test <- feature(img_test_dir, testname))
img_train_dir
img_train_dir
trainname
length(list.files(img_name))
n_files <- length(list.files(trainname))
n_files
n_files <- length(trainname)
n_files
source("feature.R")
system.time(tm_feature_test <- data_test <- feature(img_test_dir, testname))
system.time(tm_feature_train <- data_train <- feature(img_train_dir, trainname))
save(data_test, file="./output/feature_test.RData")
tm_feature_train <- system.time(data_train <- feature(img_train_dir, trainname))
save(data_train, file="./output/feature_train.RData")
source("train.R")
tm_train <- system.time(fit_train <- train(data_train,trainlabel))
save(fit_train,file="./output/fit_train.RData")
tm_test <- system.time(pred_test <- test(fit_train, data_test))
source("test.R")
tm_test <- system.time(pred_test <- test(fit_train, data_test))
tm_test <- system.time(pred_test <- test(fit_train, data_test))
test <- function(fit_train, dat_test){
pred <- predict(fit_train$fit, newdata=data_test,
n.trees=fit_train$iter, type="response")
return(as.numeric(pred> 0.5))
}
source("test.R")
tm_test <- system.time(pred_test <- test(fit_train, data_test))
fit_train
tm_test <- system.time(pred_test <- test(fit_train, data_test))
print(fit_train)
summary(fit_train)
test(fit_train, data_test)
test(fit_train, data_test)
tm_test <- system.time(pred_test <- test(as.numeric(fit_train), data_test))
source("test.R")
tm_test <- system.time(pred_test <- test(fit_train, data_test))
tm_test
test(fit_train, data_test)
tm_test <- system.time(pred_test <- test(fit_train, data_test))
save(pred_test, file="./output/pred_test.RData")
testlabel
source("test.R")
tm_test <- system.time(pred_test <- test(fit_train, data_test))
tm_test
pred_test
length(testlabel)
data_test
tm_test
pred_test
source("test.R")
tm_test <- system.time(pred_test <- test(fit_train, data_test))
pred_test <- test(fit_train, data_test)
fit_train
source("test.R")
tm_test <- system.time(pred_test <- test(fit_train, data_test))
tm_test <- system.time(pred_test <- test(fit_train, data_test))
fit_train
data_test
test(fit_train, data_test)
library(e1071)
test <- function(fit_train, data_test){
pred <- predict(fit_train, data_test)
# return(pred>1.5)
}
test
pred <- predict(fit_train, data_test)
library(e1071)
test <- function(fit_train, data_test){
pred <- predict(fit_train, data_test)
return(pred>1.5)
}
test(fit_train, data_test)
tm_train <- system.time(fit_train <- train(data_train,trainlabel))
save(fit_train,file="./output/fit_train.RData")
source("test.R")
tm_test <- system.time(pred_test <- test(fit_train, data_test))
pred_test
tm_test <- system.time(pred_test <- test(fit_train, data_test))
pred_test
source("test.R")
tm_test <- system.time(pred_test <- test(fit_train, data_test))
pred_test
data_test
tm_train <- system.time(fit_train <- train(data_train,trainlabel))
tm_test <- system.time(pred_test <- test(fit_train, data_test))
pred_test
mat <- readImage(paste0(img_dir, img_name)[i])
tm_feature_test <- system.time(data_test <- cmpfun(feature(img_test_dir, testname)))
tm_feature_train <- system.time(data_train <- feature(img_train_dir, trainname[1:100]))
tm_feature_test <- system.time(data_test <- cmpfun(feature(img_test_dir, testname[1:100])))
source("train.R")
tm_train <- system.time(fit_train <- train(data_train,trainlabel))
fit_train <- train(data_train,trainlabel)
setwd("~/GitHub/cycle3cvd-team7/wyc/")
library(data.table)
library(caret)
dir_images <- "./data"
dir_names <- list.files(dir_images)
breed_name <- rep(NA, length(dir_names))
for(i in 1:length(dir_names)){
tt <- unlist(strsplit(dir_names[i], "_"))
tt <- tt[-length(tt)]
breed_name[i] = paste(tt, collapse="_", sep="")
}
cat_breed <- c("Abyssinian", "Bengal", "Birman", "Bombay", "British_Shorthair", "Egyptian_Mau",
"Maine_Coon", "Persian", "Ragdoll", "Russian_Blue", "Siamese", "Sphynx")
iscat <- breed_name %in% cat_breed
y_cat <- as.numeric(iscat)
iscat[iscat==TRUE] <- 1
iscat[iscat==FALSE] <-2
label <- iscat
set.seed(14249)
trainindex <- createDataPartition(label, p = .75,
list = FALSE,
times = 1)
trainname <- dir_names[trainindex]
testname <- dir_names[-trainindex]
trainlabel <- label[trainindex]
testlabel <- label[-trainindex]
library("EBImage")
source("feature.R")
img_test_dir <- img_train_dir <- "./data/"
tm_feature_train <- system.time(data_train <- feature(img_train_dir, trainname[1:100]))
tm_feature_test <- system.time(data_test <- feature(img_test_dir, testname[1:100]))
tm_train <- system.time(fit_train <- train(data_train,trainlabel))
library(e1071)
source("train.R")
tm_train <- system.time(fit_train <- train(data_train,trainlabel))
train(data_train,trainlabel)
tm_train <- system.time(fit_train <- train(data_train,trainlabel[1:100]))
data_train
dim(data_train)
trainlabel[1:100]
train(data_train,trainlabel[1:100])
trainlabel
train(data_train,trainlabel[1:100])
tm_feature_train <- system.time(data_train <- feature(img_train_dir, trainname[1:150]))
tm_train <- system.time(fit_train <- train(data_train,trainlabel[1:150]))
tm_test <- system.time(pred_test <- test(fit_train, data_test))
source("test.R")
tm_test <- system.time(pred_test <- test(fit_train, data_test))
pred_test
fit_train
source("train.R")
tm_train <- system.time(fit_train <- train(data_train,trainlabel[1:150]))
tm_test <- system.time(pred_test <- test(fit_train, data_test))
pred_test
trainlabel
fit_train
predict(fit_train,data_train)
model <- svm(dat_train,label_train,kernal="linear",scale=F)
model <- svm(data_train,trainlabel,kernal="linear",scale=F)
model <- svm(data_train,trainlabel[1:150],kernal="linear",scale=F)
model
trainlabel
class(trainlabel)
trainlabel <- as.factor(label[trainindex])
testlabel <- as.factor(label[-trainindex])
tm_feature_train <- system.time(data_train <- feature(img_train_dir, trainname[1:150]))
tm_feature_test <- system.time(data_test <- feature(img_test_dir, testname[1:100]))
tm_train <- system.time(fit_train <- train(data_train,trainlabel[1:150]))
tm_test <- system.time(pred_test <- test(fit_train, data_test))
pred_test
testlabel[1:100]
pred_test-testlabel[1:100]
pred_test-testlabel[1:100]
testlabel[1:100]
pred_test
sum(pred_test==testlabel[1:100])
sum(pred_test==testlabel[1:100])/testlabel
sum(pred_test==testlabel[1:100])/sum(testlabel)
sum(pred_test==testlabel[1:100])/length(testlabel)
setwd("~/GitHub/cycle3cvd-team7/wyc/")
library(data.table)
library(caret)
#Extract the class labels from the image name
dir_images <- "./data"
dir_names <- list.files(dir_images)
breed_name <- rep(NA, length(dir_names))
for(i in 1:length(dir_names)){
tt <- unlist(strsplit(dir_names[i], "_"))
tt <- tt[-length(tt)]
breed_name[i] = paste(tt, collapse="_", sep="")
}
cat_breed <- c("Abyssinian", "Bengal", "Birman", "Bombay", "British_Shorthair", "Egyptian_Mau",
"Maine_Coon", "Persian", "Ragdoll", "Russian_Blue", "Siamese", "Sphynx")
iscat <- breed_name %in% cat_breed
y_cat <- as.numeric(iscat)
iscat[iscat==TRUE] <- 1
iscat[iscat==FALSE] <-2
label <- iscat
#Sample test and train data
set.seed(14249)
trainindex <- createDataPartition(label, p = .75,
list = FALSE,
times = 1)
trainname <- dir_names[trainindex]
testname <- dir_names[-trainindex]
trainlabel <- as.factor(label[trainindex])
testlabel <- as.factor(label[-trainindex])
#Image Analysis Toll
# source("https://bioconductor.org/biocLite.R")
# biocLite("EBImage")
library("EBImage")
source("feature.R")
#feature construction for train and test
img_test_dir <- img_train_dir <- "./data/"
tm_feature_train <- system.time(data_train <- feature(img_train_dir, trainname))
tm_feature_test <- system.time(data_test <- feature(img_test_dir, testname))
# tm_feature_train <- data_train
# tm_feature_train <- cbind(tm_feature_train,label)
save(data_train, file="./output/feature_train.RData")
save(data_test, file="./output/feature_test.RData")
#lsvm training
source("train.R")
tm_train <- system.time(fit_train <- train(data_train,trainlabel))
save(fit_train,file="./output/fit_train.RData")
source("test.R")
### Make prediction
tm_test <- system.time(pred_test <- test(fit_train, data_test))
save(pred_test, file="./output/pred_test.RData")
sum(pred_test==testlabel)/length(testlabel)
library(caret)
install.packages(c("acs", "git2r", "manipulate", "nlme", "packrat"))
install.packages("caret")
